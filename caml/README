

On a implémenté différents prouveurs de logique intuitionniste propositionnelle.

Le langage T est un langage fonctionnel simple avec une seule structure de données : des arbres binaires construits à partir d'un arbre vide et de feuilles étiquetées par des entiers naturels. D. Larchey-Wendling a réalisé pour ce langage un compilateur certifié vers un langage exécutable par une machine abstraite assez simple, ainsi qu’un programme certifié simulant l’exécution de cette machine abstraite. On appelle M le langage associé à cette machine abstraite.

Voir le rapport de stage pour plus de détails.


"Prouveur simple" : Ce prouveur, le premier implémenté, est le plus simple et le plus efficace. Il effectue directement la recherche de preuve telle qu’elle est décrite dans l’article présentant LSJ, en utilisant notamment des structures de données élaborées pour le séquent. En revanche, aucun effort n’est fait pour faciliter la certification.
"Prouveur T". On compile un programme en langage T adapté à la formule donnée en argument. Pour cela, on réalise l’indexation, puis on compile des fonctions correspondant à chaque sous-formule de la formule initiale. On ajoute ensuite ces fonctions à du code en T écrit à l’avance, car indépendant de la formule. Le programme intégral en T obtenu est écrit dans un fichier temporaire. Dans un deuxième temps, on exécute ce programme à l’aide d’un analyseur pour T puis d’un interpréteur relativement naïf. Cela renvoie un booléen qui doit indiquer si la formule initiale est prouvable en logique intuitionniste.
“Prouveur T M”. On génère le même programme en T que précédemment. Mais cette fois, pour l’exécuter, on utilise un compilateur (fourni par D. Larchey-Wendling) de T vers M. On simule ensuite l’exécution du code en M par la machine abstraite simple à laquelle ce langage correspond, en utilisant les arbres de caml plutôt qu’en manipulant explicitement des pointeurs. (Le code en M n’est pas écrit dans un fichier, mais directement passé au simulateur sous la forme d’un arbre de syntaxe abstraite.)
“Prouveur compilé Caml”. On compile, selon la méthode employée par le “prouveur T”, un programme adapté à la formule donnée en argument, mais ce programme est écrit en OCaml. On lance ensuite le compilateur ocamlc sur le fichier temporaire contenant ce programme, puis on lance le fichier exécutable généré. Ce prouveur a été implémenté afin de tester de l’efficacité de la compilation de fonctions adaptées à la formule, sans l’influence de l’utilisation du langage T moins élaboré.



“Prouveur simple avec listes”. Ce prouveur est similaire au "prouveur simple", mais les structures de données utilisées pour le séquent sont de simples listes. Cela permet une comparaison plus juste avec les autres prouveurs.
Afin d'utiliser ce prouveur, il faut commenter/décommenter quelques lignes au début de prouveurs/prouveur_simple/sequent/seq.ml (indiquées dans le fichier) ; il devient alors le nouveau prouveur par défaut. Je ne m'attendais pas à vouloir faire varier les structures de données du séquent après compilation.




--------





Usage

Le prouveur utilisé par défaut est le "prouveur simple", qui est le plus efficace. Les autres s'utilisent avec les flags -T, -TM, -compile-caml.
Formule(s) à traiter :
   <nom de fichier en .p> (syntaxe des problèmes d'ILTP) : exécute sur la formule décrite par le fichier, en comparant avec le résultat attendu donné dans les commentaires
   <nom de répertoire> : cherche récursivement les fichiers en .p
   voir aussi les flags -liste, -liste-courte, -ph, -eqb
Affichage par défaut : nom de la formule traitée (lié au nom du fichier en .p s'il y en a un), temps mis pour décider si elle est prouvable et nombre d'appels à la fonction récursive principale. On n'affiche en général pas le résultat (prouvable ou non), mais on compare ce résultat à celui qu'on devait trouver, et si ce n'est pas le même, on le signale.
  -T : utilise le "prouveur T"
  -TM : utilise le "prouveur T M"
  -compile-caml : utilise le "prouveur compilé caml"
  -all : utilise successivement "prouveur simple", "prouveur T", "prouveur T M", "prouveur compilé caml" (et génère un fichier results.txt qui contient les différents temps mis sous forme de tableau, mais il y a parfois des problèmes avec la mise en page du tableau)
  -indexation : affiche un tableau correspondant à l'étape d'indexation ; ne lance aucune recherche de preuve
  -f : affiche la formule
  -resultat : affiche le résultat ("vrai" ou "faux")
  -rien-afficher : n'affiche que le temps total, sauf si on trouve un résultat différent de celui attendu
  -notime : ne chronomètre pas
  -stop <f:float> : arrête si non terminé après f secondes
  -ph <p:int> <h:int> : traite la formule suivante : principe du pigeonnier avec p pigeons et h trous
  -eqb <n:int> : traite la formule suivante : (p1 <-> p2) | (p2 <-> p3) | ... | (pn <-> p1)
  -liste : traite une liste de quelques formules courtes
  -liste-courte : traite une liste de quelques formules très courtes





--------




Quelques remarques sur les dossiers

utilitaires : contient ce qui permet de gérer les tests : choix du prouveur, parcours d'un répertoire, analyseur des fichiers d'ILTP, chronométrage etc.

Problems : contient les fichiers d'ILTP qu'on peut obtenir sur le site http://www.cs.uni-potsdam.de/ti/iltp/formulae.html, plus un fichier temoin_se_trompe.p permettant de voir ce qui est affiché si le résultat obtenu ne correspond pas à celui attendu.

prouveurs : ce qui n'est ni dans prouveur_simple, ni dans prouveurs_autres est commun à tous les prouveurs, notamment l'indexation.





-------






Ce qui suit est l'ancienne description des fichiers, à un moment où il n'y avait que le "prouveur simple". Elle est obsolète, mais pour l'instant je la laisse car elle contient des détails que je n'explique pas ailleurs


Lorsqu'on dit que nom.ml fait quelque chose, cela sous-entend le cas échéant la fonction Nom.main


analyseur :

	lexer.mll, parser.mly, syntaxe_fichier.mli : ce à quoi on s'attend

	exec_fichier.ml : prend un nom de fichier, parse le fichier et lance Exec_formule.main sur la formule obtenue (en précisant aussi les résultats attendus)




prouveur :

	def.mli : la structure des formules
	global_ref.ml : les références de tableau sf (le graphe des sous-formules), classe et priorite, remplies par les fichier du dossier "indexation" et utilisées à divers endroits

	indexation :
		init_sf_classe : initialise Global_ref.sf et Global_ref.classe à partir de la formule donnée en argument
		init_priorite : initialise Global_ref.priorite

	prouveur.ml : décide si une formule est prouvable. C'est ici qu'on appelle les fonctions d'initialisation, puis stratégie/prouvable.ml.

	stratégie/prouvable.ml : exécute l'algorithme de recherche de preuve en utilisant les fonctions d'effet_regle_sur_sequent.ml

	preuve_contre_modele :
		les structures de preuve et contre-modèle et un type Rep.t qui peut être l'une ou l'autre, avec des fonctions pour les manipuler destinées à prouveur.ml. Ne contient que des fichiers inutilisés pour le moment (dont certains incomplets), car retenir toutes ces informations était trop coûteux. Il faudra que j'essaie de retenir un minimum d'information pour pouvoir les reconstruire à la demande.

	sequent :

		seq.ml : définit le séquent et contient les fonctions qui agissent dessus. Plusieurs champs du séquents contiennent des structures définies dans dans structures.

		effet_regle_sur_sequent.ml : pour chaque prémisse de chaque règle, contient une fonction qui transforme la conclusion en cette prémisse, et une qui fait la transformation inverse, en utilisant seq.ml.

		structures :
			Définit et manipule les structures utilisées dans les champs du séquent.

			tableau_priorite.ml : contient un foncteur qui fabrique un tableau de 7 cases contenant la structure donnée en argument, destiné à représenter les ensembles "gamma" et "delta" du séquent en classant les formules par priorité.

			tableau_classe.ml : contient un foncteur qui fabrique un tableau de la structure donnée en argument, avec autant de cases que de classes, destiné à retenir quelles classes sont présentes dans le séquent avec quels indices, afin de tester rapidement si on peut appliquer l'axiome "Id".

			case_priorite.ml et case_classe.ml : à partir des structures de données de indiceXsflist_list.ml et indiceXoccurrences_list.ml, fabriquent les modules qui seront donnés en argument aux foncteurs ci-dessus, en distinguant ceux destinés à représenter la partie gauche ou droite du séquent : on garde les fonctions en "_inf" (comme : on s'intéresse uniquement aux indices inférieurs à l'indice n du séquent lui-même, n étant donné en argument) pour la partie gauche, et en "_eq" (idem pour les indices égaux à n) pour la partie droite.

			indiceXsflist_list.ml : représente un ensemble de couples indice * (numéro de sous-formule) par une liste, triée par indices décroissants, de couples indice * (liste des numéros de sous-formule apparaissant avec cet indice), telle qu'il y a maximum un tel couple par indice et que s'il y en a un, la liste dedans est non vide. Utilisé pour "gamma" et "delta" (dans les cases du tableau indexé par les priorités).

			indiceXoccurrences_list.ml : représente un multiensemble d'indices par une liste de couples indice * (nombre d'occurrences de cet indice), triée par indices décroissants. Il y a maximum un couple par indice et s'il y en a un, le nombre d'occurrences est strictement positif. Utilisé pour retenir quelles classes sont présentes avec quels indices (dans les cases du tableau indexé par les classes).




sortie : contient les fichiers d'impression et de choix de ce qu'on imprime (je ne sais pas comment l'appeler...)

	exec_formule.ml : prend une formule et applique ce qui est indiqué par les options : l'imprime ou imprime les tableaux d'indexation ou applique Prouveur.main et imprime le résultat...
	main.ml : le fichier lancé à l'exécution. Parse les options et lance Analyseur.main sur des noms de fichiers ou directement Exec_formule.main sur des formules
	options.ml : contient les références correspondant aux options
	time.ml : contient tout ce qui permet de chronométrer
	to_string.ml : convertit différents type de données en chaînes de caractères










